import express from "express";
import { GoogleGenAI } from "@google/genai";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

const app = express();
app.use(express.json());
app.use(express.static('public'));

// Redirect root to landing page
app.get('/', (req, res) => {
  res.redirect('/landing.html');
});

// API Keys from environment variables
const GEMINI_API_KEY = process.env.GEMINI_API_KEY || "AIzaSyCxJ5-O-9jVQmWg3-8rx8GnqxTd8FtDqEk";
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || "sk-or-v1-your-actual-api-key-here";

// Initialize Google GenAI
const ai = new GoogleGenAI({
  apiKey: GEMINI_API_KEY
});

// OpenRouter API configuration
const OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1/chat/completions";

// Extract data from text using Gemini
app.post("/api/extract-data", async (req, res) => {
  try {
    const extractPrompt = `
ุงุณุชุฎุฑุฌ ุงูุจูุงูุงุช ุงูุชุงููุฉ ูู ุงููุต ุงููุนุทู ูุฃุนุฏูุง ูู ุตูุบุฉ JSON:

ุงููุต: ${req.body.prompt}

ุงููุทููุจ ุงุณุชุฎุฑุงุฌู:
- name: ุงูุงุณู ุงููุงูู
- profession: ุงููููุฉ ุฃู ุงูุชุฎุตุต
- bio: ูุจุฐุฉ ุดุฎุตูุฉ
- skills: ูุงุฆูุฉ ุงูููุงุฑุงุช (array)
- projects: ูุงุฆูุฉ ุงููุดุงุฑูุน ูุน ุงูุฃุณูุงุก ูุงูุฃูุตุงู ูุงูุฑูุงุจุท (array)
- github: ุฑุงุจุท GitHub
- linkedin: ุฑุงุจุท LinkedIn
- twitter: ุฑุงุจุท Twitter
- instagram: ุฑุงุจุท Instagram
- email: ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
- phone: ุฑูู ุงููุงุชู
- additionalLinks: ุฑูุงุจุท ุฅุถุงููุฉ (array of objects with name and url)

ุฃุนุฏ ููุท JSON ุจุฏูู ุฃู ุดุฑุญ ุฃู ุชุนูููุงุช.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: extractPrompt
    });

    let extractedData = response.text || "{}";
    
    // Clean the response
    extractedData = extractedData.replace(/```json\n?/g, '').replace(/```/g, '').trim();
    
    try {
      const data = JSON.parse(extractedData);
      res.json({ success: true, data });
    } catch (parseError) {
      res.json({ success: false, error: "Failed to parse extracted data" });
    }
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// Generate portfolio from structured data using OpenRouter
app.post("/api/generate-portfolio", async (req, res) => {
  try {
    // Use a different variable name to avoid redeclaration
    const portfolioData = req.body;
    const designPrompt = portfolioData.designPrompt || 'Modern and elegant design';
    
    // Generate default images if not provided
    const getDefaultProfileImage = (profession) => {
      const professionImages = {
        'ูุทูุฑ': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',
        'ูุตูู': 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face',
        'ูููุฏุณ': 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',
        'ูุฏูุฑ': 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face',
        'developer': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',
        'designer': 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=400&h=400&fit=crop&crop=face',
        'engineer': 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',
        'manager': 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face'
      };
      return professionImages[profession] || 'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=400&h=400&fit=crop&crop=face';
    };

    const getDefaultProjectImage = (projectName) => {
      const projectImages = {
        'ูููุน': 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop',
        'ุชุทุจูู': 'https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?w=600&h=400&fit=crop',
        'ูุธุงู': 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop',
        'ููุตุฉ': 'https://images.unsplash.com/photo-1551650975-87deedd944c3?w=600&h=400&fit=crop',
        'website': 'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop',
        'app': 'https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?w=600&h=400&fit=crop',
        'system': 'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop',
        'platform': 'https://images.unsplash.com/photo-1551650975-87deedd944c3?w=600&h=400&fit=crop'
      };
      return projectImages[Object.keys(projectImages).find(key => projectName.toLowerCase().includes(key))] || 'https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=600&h=400&fit=crop';
    };

    const profileImage = portfolioData.profileImageUrl || getDefaultProfileImage(portfolioData.profession);
    const projectsWithImages = (portfolioData.projects || []).map(project => ({
      ...project,
      imageUrl: project.imageUrl || getDefaultProjectImage(project.name)
    }));

    const portfolioPrompt = `Create a clean, modern, and professional portfolio website. Use the following data:

Personal Information:
- Name: ${portfolioData.name || 'Not specified'}
- Profession: ${portfolioData.profession || 'Not specified'}
- Bio: ${portfolioData.bio || 'Not specified'}
- Skills: ${portfolioData.skills ? portfolioData.skills.join(', ') : 'Not specified'}
- Email: ${portfolioData.email || 'Not specified'}
- Phone: ${portfolioData.phone || 'Not specified'}
- GitHub: ${portfolioData.github || 'Not specified'}
- LinkedIn: ${portfolioData.linkedin || 'Not specified'}
- Twitter: ${portfolioData.twitter || 'Not specified'}
- Instagram: ${portfolioData.instagram || 'Not specified'}
- Profile Image: ${profileImage}
- Projects: ${JSON.stringify(projectsWithImages)}
- Additional Links: ${JSON.stringify(portfolioData.additionalLinks || [])}

Design Requirements:
${designPrompt}

DESIGN GUIDELINES - Create a CLEAN and ELEGANT website:

๐จ CLEAN DESIGN:
- Use simple, clean layouts with plenty of white space
- Implement subtle gradients and soft shadows
- Add gentle hover effects (scale 1.05, color transitions)
- Use clean typography with good contrast
- Keep animations minimal and smooth

๐ COLOR SCHEME:
- Primary: Clean blue (#007bff) or teal (#00ffff)
- Secondary: Soft gray (#6c757d) or white
- Background: Light (#f8f9fa) or dark (#212529) based on preference
- Text: High contrast for readability
- Accents: Subtle color highlights

โจ SIMPLE ANIMATIONS:
- Fade-in effects on scroll
- Gentle hover transitions
- Smooth button interactions
- Simple loading states
- Clean transitions between sections

๐ฑ RESPONSIVE DESIGN:
- Mobile-first approach
- Clean breakpoints
- Touch-friendly buttons
- Readable text on all devices

๐ฏ SECTIONS TO INCLUDE:
1. HERO: Clean header with name, title, and call-to-action
2. ABOUT: Simple bio section with clear typography
3. SKILLS: Clean skill bars or simple tags
4. PROJECTS: Grid layout with clean project cards
5. CONTACT: Simple contact form and social links

๐ซ CLEAN FEATURES:
- Good use of whitespace
- Clear hierarchy
- Readable fonts
- Simple navigation
- Clean buttons and forms
- Professional color scheme

๐ TECHNICAL REQUIREMENTS:
- Use modern CSS Grid and Flexbox
- Include smooth scrolling
- Add basic responsive design
- Use semantic HTML5
- Include proper accessibility
- Keep code clean and organized

Create a portfolio that is professional, clean, and easy to read. Focus on content and usability over flashy effects. Make it look like a well-designed professional website.

Return ONLY the complete HTML code without any explanations or comments.`;

    // Use OpenRouter API with correct format
    const response = await fetch(OPENROUTER_BASE_URL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
        "HTTP-Referer": "http://localhost:3000",
        "X-Title": "AI Portfolio Generator",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        "model": "nvidia/nemotron-nano-9b-v2:free",
        "messages": [
          {
            "role": "user",
            "content": portfolioPrompt
          }
        ],
        "max_tokens": 8000,
        "temperature": 0.7
      })
    });

    if (!response.ok) {
      throw new Error(`OpenRouter API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    let html = data.choices[0].message.content || "";
    
    // Clean the response
    html = html.replace(/```[\w]*\n?/g, '').replace(/```/g, '').trim();
    
    res.json({ success: true, html });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// Enhance portfolio code using Gemini
app.post("/api/enhance-portfolio", async (req, res) => {
  try {
    const { html, designPrompt } = req.body;
    
    if (!html) {
      return res.status(400).json({ success: false, error: "HTML code is required" });
    }

    const enhancementPrompt = `
ุชุญุณูู ูุชุญููู ุงูููุฏ ุงูุชุงูู ููููุน ุงูุจูุฑุชูููููู:

ุงูููุฏ ุงูุญุงูู:
${html}

ูุชุทูุจุงุช ุงูุชุตููู:
${designPrompt || 'ุชุญุณูู ุนุงู ููุชุตููู'}

ุงููุทููุจ:
1. ุชุญููู ุงูููุฏ ุงูุญุงูู ูุชุญุฏูุฏ ููุงุท ุงูุชุญุณูู
2. ุชุญุณูู ุงูุชุตููู ุงูุจุตุฑู ูุงูุฃููุงู
3. ุฅุถุงูุฉ ุชุฃุซูุฑุงุช hover ูุงููููุดู ูุทููุฉ
4. ุชุญุณูู ุงูุชุฎุทูุท ูุงููุณุงุญุงุช ุงูุจูุถุงุก
5. ุชุญุณูู ุงูุฎุทูุท ูุงูุชุจุงูู
6. ุฅุถุงูุฉ ุชุฃุซูุฑุงุช ุจุตุฑูุฉ ุฌูููุฉ ูููู ุบูุฑ ูุนูุฏุฉ
7. ุชุญุณูู ุงูุงุณุชุฌุงุจุฉ ููุฃุฌูุฒุฉ ุงููุฎุชููุฉ
8. ุฅุถุงูุฉ ุชูุงุนูุงุช ุจุณูุทุฉ ูุฌูููุฉ
9. ุชุญุณูู ุงูุฃููุงู ูุงูุชุฏุฑุฌุงุช
10. ุฅุถุงูุฉ ุชุฃุซูุฑุงุช CSS ูุชูุฏูุฉ ูููู ุฃูููุฉ

ุฃุนุฏ ุงูููุฏ ุงููุญุณู ูุงููุงู ูุน:
- ุชุญุณููุงุช ุจุตุฑูุฉ ุฌูููุฉ
- ุชุฃุซูุฑุงุช hover ูุทููุฉ
- ุฃููุงู ูุชุฏุฑุฌุฉ ุฃูููุฉ
- ุงููููุดู ุจุณูุทุฉ ูุณูุณุฉ
- ุชุฎุทูุท ูุญุณู
- ุฎุทูุท ุฌูููุฉ
- ูุณุงุญุงุช ุจูุถุงุก ููุงุณุจุฉ
- ุชุฃุซูุฑุงุช ุจุตุฑูุฉ ุฃูููุฉ

ุฃุนุฏ ููุท ุงูููุฏ HTML ุงููุญุณู ุจุฏูู ุฃู ุดุฑุญ ุฃู ุชุนูููุงุช.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: enhancementPrompt
    });

    let enhancedHtml = response.text || "";
    
    // Clean the response
    enhancedHtml = enhancedHtml.replace(/```[\w]*\n?/g, '').replace(/```/g, '').trim();
    
    res.json({ success: true, html: enhancedHtml });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

app.post("/api/generate", async (req, res) => {
  try {
    // ุฅูุดุงุก ูููุน ุจูุฑุชูููููู ุงุญุชุฑุงูู
    const portfolioPrompt = `
ุฃูุช ูููุฏ ููุงูุน ุจูุฑุชูููููู ุงุญุชุฑุงูู. ูููุชู ุฅูุดุงุก ูููุน ุจูุฑุชูููููู ูุงูู ููุชุฌุงูุจ ุจุงุณุชุฎุฏุงู HTML ู CSS ู JavaScript.

ุงููุนูููุงุช ุงููุทููุจุฉ:
${req.body.prompt || "ูุทูุฑ ููุจ ุจุฎุจุฑุฉ 5 ุณููุงุช"}

ุงููุทููุจ:
1. ุฅูุดุงุก ูููุน ุจูุฑุชูููููู ุงุญุชุฑุงูู ููุชุฌุงูุจ
2. ุงุณุชุฎุฏุงู HTML5 ู CSS3 ู JavaScript
3. ุชุตููู ุญุฏูุซ ูุฃููู ูุน ุฃููุงู ูุชูุงุณูุฉ
4. ุฃูุณุงู ุงููููุน:
   - Hero Section: ุตูุฑุฉ ุดุฎุตูุฉุ ุงุณูุ ุนููุงู ูุธูููุ ูุจุฐุฉ ูุฎุชุตุฑุฉ
   - About Section: ูุจุฐุฉ ุดุฎุตูุฉ ูููููุฉ
   - Skills Section: ุงูููุงุฑุงุช ูุน ุฃููููุงุช
   - Projects Section: ุงููุดุงุฑูุน ูุน ุตูุฑ ูุฑูุงุจุท
   - Contact Section: ูุนูููุงุช ุงูุชูุงุตู ูุงููุณุงุฆุท ุงูุงุฌุชูุงุนูุฉ
5. ุงุณุชุฎุฏุงู CSS Grid ู Flexbox ููุชุตููู ุงููุชุฌุงูุจ
6. ุฅุถุงูุฉ ุชุฃุซูุฑุงุช hover ูุงููููุดู ุฎูููุฉ
7. ุงุณุชุฎุฏุงู ุฎุทูุท Google Fonts
8. ุงูุฃููุงู: ุชุฏุฑุฌ ุฃุฒุฑู/ุจููุณุฌู ูุน ููุณุงุช ุฐูุจูุฉ
9. ุงูุชุฃูุฏ ูู ุฃู ุงููููุน ูุนูู ุนูู ุฌููุน ุงูุฃุฌูุฒุฉ

ุฃุนุฏ ููุท ุงูููุฏ HTML ุงููุงูู ูุน CSS ู JavaScript ูุฏูุฌุ ุจุฏูู ุฃู ุดุฑุญ ุฃู ุชุนูููุงุช.`;

    const portfolioResponse = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: portfolioPrompt
    });

    let cleanHtml = portfolioResponse.text || "";
    
    // ุชูุธูู ุงููุต ูู ุนูุงูุงุช ุงูููุฏ
    cleanHtml = cleanHtml.replace(/```[\w]*\n?/g, '');
    cleanHtml = cleanHtml.replace(/```/g, '');
    cleanHtml = cleanHtml.trim();
    
    // ุฅุฑุฌุงุน ุงููุต ุงูููุธู
    res.json({
      choices: [{
        message: {
          content: cleanHtml
        }
      }]
    });
  } catch (error) {
    if (error.response) {
      // ูู ุงูุณูุฑูุฑ ุฑุฌุน HTML ุฃู Error
      res.status(error.response.status).send(error.response.data);
    } else {
      res.status(500).send({ error: error.message });
    }
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`๐ Server running on http://localhost:${PORT}`);
});


